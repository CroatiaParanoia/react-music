{"version":3,"sources":["serviceWorker.ts","pages/HomeTabBar/index.tsx","store/User.ts","store/Global.ts","pages/Login/index.tsx","pages/Home/index.tsx","pages/User/index.tsx","components/first-screen/index.tsx","components/suspension-ball/index.tsx","router/RouteGuard.tsx","router/index.tsx","middleware/withFetcher.tsx","middleware/withStore.tsx","App.tsx","index.tsx","pages/Login/style.module.scss","components/first-screen/style.module.scss","pages/Home/style.module.scss","components/suspension-ball/style.module.scss"],"names":["Boolean","window","location","hostname","match","HomeTabBarType","defaultUserInfo","token","gender","nickname","signature","avatarUrl","followers","following","phone","password","createContainer","useLocalStorage","initUserInfo","saveUserInfo","useState","userInfo","setUserInfo","logout","useCallback","onUpdUserInfo","partUserInfo","produce","draftState","Object","entries","forEach","assign","useEffect","rememberTheme","setRememberTheme","theme","setTheme","resetTheme","toggleTheme","document","body","setAttribute","LoginPage","setPhone","setPassword","User","useContainer","history","useHistory","login","replace","show","className","classNames","style","container","title","form","value","onChange","placeholder","clear","type","onClick","Home","toLogin","classnames","homeContainer","data-testid","UserPage","goBack","HomeTabBar","activeItem","tabBarList","useMemo","key","badge","dot","icon","selectedIcon","render","item","renderIcon","map","otherInfo","isSelected","Item","selected","FirstScreen","count","setCount","isHide","setHide","useSessionStorage","isViewedFirstScreen","setViewStatus","hide","timer","setInterval","clearInterval","jump","mainText","SuspensionBall","Global","RouteGuard","children","redirectPath","otherProps","to","pathname","state","from","exact","path","component","Login","withFetcher","config","instance","refreshInterval","withStore","Container","initialState","Provider","wrapper","R","App","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.2b5a86e4.chunk.js","sourcesContent":["/* eslint-disable no-eq-null */\n/* eslint-disable eqeqeq */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config?.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config?.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { TabBar } from 'antd-mobile';\nimport Home from '@pages/Home';\nimport User from '@pages/User';\nexport enum HomeTabBarType {\n  Home = '首页',\n  User = '我的'\n}\n\nconst HomeTabBar: React.FC<{}> = () => {\n  const [activeItem] = useState(HomeTabBarType.Home);\n\n  const tabBarList = useMemo(() => {\n    return [\n      {\n        title: HomeTabBarType.Home,\n        key: HomeTabBarType.Home,\n        badge: 0,\n        dot: false,\n        icon: null,\n        selectedIcon: null,\n        render(item: any) {\n          return <Home />;\n        }\n      },\n      {\n        title: HomeTabBarType.User,\n        key: HomeTabBarType.User,\n        badge: 0,\n        dot: false,\n        icon: null,\n        selectedIcon: null,\n        render(item: any) {\n          return <User />;\n        }\n      }\n    ];\n  }, []);\n\n  const renderIcon = useCallback((icon?: string) => {\n    return <div />;\n  }, []);\n\n  return (\n    <TabBar>\n      {tabBarList.map((item) => {\n        const { render, ...otherInfo } = item;\n        const { key, title, dot } = otherInfo;\n        const isSelected = activeItem === key;\n        return (\n          <TabBar.Item\n            key={key}\n            selected={isSelected}\n            title={title}\n            dot={dot}\n            icon={renderIcon()}\n            selectedIcon={renderIcon()}\n          >\n            {render(otherInfo)}\n          </TabBar.Item>\n        );\n      })}\n    </TabBar>\n  );\n};\n\nexport default HomeTabBar;\n","import { useState, useEffect, useCallback } from 'react';\nimport { createContainer } from 'unstated-next';\nimport produce from 'immer';\nimport { useLocalStorage } from 'react-use';\n\nconst defaultUserInfo = {\n  token: '', // token\n  gender: 0, // 性别\n  nickname: '', // 昵称\n  signature: '', // 个性签名\n  avatarUrl: '', // 头像\n  followers: 0, // 粉丝\n  following: 0, // 关注的人\n  phone: '',\n  password: '',\n};\n\ntype UserInfo = typeof defaultUserInfo;\ntype PartUserInfo = Partial<UserInfo>;\n\nconst User = () => {\n  const [initUserInfo, saveUserInfo] = useLocalStorage<UserInfo>('userInfo', defaultUserInfo);\n  const [userInfo, setUserInfo] = useState<UserInfo>(initUserInfo);\n  const logout = useCallback(() => {\n    setUserInfo(defaultUserInfo);\n  }, [setUserInfo]);\n\n  const onUpdUserInfo = useCallback(\n    (partUserInfo: PartUserInfo) => {\n      setUserInfo(\n        produce(userInfo, (draftState) => {\n          Object.entries(partUserInfo).forEach(([key, value]) => {\n            Object.assign(draftState, partUserInfo);\n          });\n        })\n      );\n    },\n    [userInfo, setUserInfo]\n  );\n\n  useEffect(() => {\n    saveUserInfo(userInfo);\n  }, [userInfo, saveUserInfo]);\n\n  return { logout, userInfo, setUserInfo: onUpdUserInfo };\n};\n\nexport default createContainer(User);\n","import { useState, useEffect, useCallback } from 'react';\nimport { createContainer } from 'unstated-next';\nimport { useLocalStorage } from 'react-use';\n\ntype Theme = 'light' | 'dark';\n\nconst defaultTheme: Theme = 'light';\n\nconst Global = () => {\n  const [rememberTheme, setRememberTheme] = useLocalStorage<Theme>('theme', defaultTheme);\n  const [theme, setTheme] = useState<Theme>(rememberTheme);\n  const resetTheme = useCallback(() => {\n    setTheme(defaultTheme);\n  }, [setTheme]);\n\n  const toggleTheme = useCallback(() => {\n    setTheme(theme === 'dark' ? 'light' : 'dark');\n  }, [theme]);\n\n  useEffect(() => {\n    document.body.setAttribute('data-theme', theme);\n    setRememberTheme(theme);\n  }, [theme, setRememberTheme]);\n\n  return { theme, toggleTheme, resetTheme };\n};\n\nexport default createContainer(Global);\n","import React, { useState, useCallback } from 'react';\nimport { Button, InputItem, Toast } from 'antd-mobile';\nimport { User } from '@src/store';\nimport { useHistory } from 'react-router-dom';\n\nimport classNames from 'classnames';\n\nimport style from './style.module.scss';\nconst LoginPage = () => {\n  const [phone, setPhone] = useState('');\n  const [password, setPassword] = useState('');\n  const { setUserInfo } = User.useContainer();\n  const history = useHistory();\n\n  const login = useCallback(() => {\n    if (phone && password) {\n      setUserInfo({ token: phone + password, phone, password });\n      history.replace('tab-bar');\n      return;\n    }\n    Toast.show(`你啷个倒是输入个账号密码撒`, 300, false);\n  }, [phone, password, history, setUserInfo]);\n\n  return (\n    <div className={classNames(style.container, 'df fdc jc ac')}>\n      <div className={style.title}>不行走两步？</div>\n\n      <div className={classNames(style.form, 'w100percent')}>\n        <InputItem\n          value={phone}\n          onChange={setPhone}\n          placeholder=\"输入你的贫民账号\"\n          clear\n          type=\"phone\"\n        >\n          账号\n        </InputItem>\n        <InputItem\n          value={password}\n          onChange={setPassword}\n          placeholder=\"输入你的贫民密码\"\n          type=\"password\"\n        >\n          密码\n        </InputItem>\n      </div>\n      <div className={classNames(style.login, 'w100percent')} onClick={login}>\n        <Button className=\"w100percent1\">登录</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginPage;\n","import React, { useCallback } from 'react';\nimport classnames from 'classnames';\nimport { Button } from 'antd-mobile';\nimport { useHistory } from 'react-router-dom';\nimport style from './style.module.scss';\nimport { User } from '@src/store';\n\nconst Home: React.FC<{}> = () => {\n  const {\n    logout,\n    userInfo: { phone, password }\n  } = User.useContainer();\n  const history = useHistory();\n\n  const toLogin = useCallback(() => {\n    logout();\n    history.replace('/login');\n  }, [logout, history]);\n\n  return (\n    <div className={classnames(style.homeContainer)} data-testid=\"homeTitle\">\n      {`你的账号： ${phone}, 你的密码: ${password}`}\n      <Button onClick={toLogin}>退出登录登录</Button>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { User } from '@src/store';\nimport { useHistory } from 'react-router-dom';\n\nconst UserPage: React.FC<{}> = () => {\n  const { userInfo: { nickname } } = User.useContainer();\n  const history = useHistory();\n  return (\n    <div>\n      用户页面哦 - {nickname}\n      <button onClick={history.goBack}>返回</button>\n    </div>\n  );\n};\n\nexport default UserPage;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { useSessionStorage } from 'react-use';\nimport style from './style.module.scss';\nimport classNames from 'classnames';\n\nconst FirstScreen = () => {\n  const [count, setCount] = useState(5);\n  const [isHide, setHide] = useState(false);\n  const [isViewedFirstScreen, setViewStatus] = useSessionStorage('isViewedFirstScreen', false);\n \n  const hide = useCallback(() => {\n    setViewStatus(true);\n    setHide(true);\n  }, [setHide, setViewStatus]);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCount(count - 1);\n    }, 1000);\n\n    if (count <= 0 || isViewedFirstScreen) {\n      hide();\n    }\n    return () => {\n      clearInterval(timer);\n    };\n  }, [count, setCount, isViewedFirstScreen, hide]);\n\n  if (isHide) {\n    return null;\n  }\n\n  return (\n    <div className={classNames(style.container, 'df fdc ac jc')}>\n      <div className={classNames(style.jump, 'df jc ac')} onClick={hide}>\n        跳过({count})\n      </div>\n      <div className={style.mainText}>网易云音乐</div>\n    </div>\n  );\n};\n\nexport default FirstScreen;\n","import React from 'react';\nimport { Global } from '@src/store';\nimport style from './style.module.scss';\n\nconst SuspensionBall = () => {\n  const { theme, toggleTheme } = Global.useContainer();\n  return (\n    <div className={style.container} onClick={toggleTheme}>\n      {theme}\n    </div>\n  );\n};\n\nexport default SuspensionBall;\n","import React, { useCallback } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { User } from '@src/store';\n\ntype RouterGuardProps = React.ComponentProps<typeof Route> & {\n  redirectPath?: string;\n};\n\nconst RouteGuard: React.FC<RouterGuardProps> = ({\n  children,\n  redirectPath = '/login',\n  ...otherProps\n}) => {\n  const {\n    userInfo: { token }\n  } = User.useContainer();\n  const render = useCallback(({ location }) => {\n    if (token) {\n      return children;\n    }\n    return (\n      <Redirect\n        to={{\n          pathname: redirectPath,\n          state: { from: location }\n        }}\n      />\n    );\n  }, [children, redirectPath, token]);\n\n  return <Route {...otherProps} render={render} />;\n};\n\nexport default RouteGuard;\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\n\nimport Login from '@pages/Login';\nimport HomeTabBar from '@pages/HomeTabBar';\nimport User from '@pages/User';\n\nimport FirstScreen from '@components/first-screen';\nimport SuspensionBall from '@components/suspension-ball';\n\nimport RouteGuard from './RouteGuard';\n\nexport default () => {\n  return (\n    <Router>\n      <FirstScreen />\n      <SuspensionBall />\n      <Switch>\n        <RouteGuard exact path=\"/tab-bar\" component={HomeTabBar} />\n        <RouteGuard exact path=\"/user-info\" component={User} />\n        <Route exact path=\"/login\" component={Login} />\n        <Redirect from=\"/\" to=\"/login\" />\n      </Switch>\n    </Router>\n  );\n};\n","import React from 'react';\nimport { SWRConfig } from 'swr';\nimport { PickComponentParam } from 'globalType';\n\ntype ValueType = PickComponentParam<typeof SWRConfig, 'value'>;\n\nconst withFetcher = (config: ValueType = {}) => (instance: React.ReactElement) => {\n  return (\n    <SWRConfig\n      value={{\n        refreshInterval: 0,\n        ...config\n      }}\n    >\n      {instance}\n    </SWRConfig>\n  );\n};\n\nexport type WithFetcher = typeof withFetcher;\n\nexport default withFetcher;\n","import React from 'react';\nimport { Container } from 'unstated-next';\n\ntype TContainer<V, S> = Container<V, S>;\n\nconst withStore = <V, S>(Container: TContainer<V, S>, initialState?: any) => (\n  instance: React.ReactElement\n) => {\n  return <Container.Provider initialState={initialState}>{instance}</Container.Provider>;\n};\n\nexport type WithStore = typeof withStore;\n\nexport default withStore;\n","import React from 'react';\nimport * as R from 'ramda';\nimport Router from './router';\nimport { User, Global } from './store';\nimport { withFetcher, withStore } from './middleware';\n\nimport './sass/global.scss';\n\nconst wrapper = R.pipe(withStore(User), withStore(Global), withFetcher());\n\nconst App = () => {\n  return wrapper(<Router />);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__3UGcz\",\"title\":\"style_title__39CpI\",\"login\":\"style_login__2LLk0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__1q02T\",\"jump\":\"style_jump__2Mlun\",\"mainText\":\"style_mainText__2U5cN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"homeContainer\":\"style_homeContainer__2RLad\",\"demoBox\":\"style_demoBox__2A7fI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__2GlnI\"};"],"sourceRoot":""}